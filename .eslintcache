[{"/Users/sanderulset/Documents/Github/tic-tac-toe/src/index.js":"1","/Users/sanderulset/Documents/Github/tic-tac-toe/src/App.js":"2","/Users/sanderulset/Documents/Github/tic-tac-toe/src/Toe.jsx":"3"},{"size":196,"mtime":1609028867782,"results":"4","hashOfConfig":"5"},{"size":3522,"mtime":1609028754383,"results":"6","hashOfConfig":"5"},{"size":230,"mtime":1608918408173,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16ssk6x",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"/Users/sanderulset/Documents/Github/tic-tac-toe/src/index.js",[],"/Users/sanderulset/Documents/Github/tic-tac-toe/src/App.js",["16","17","18"],"import './App.css';\nimport Toe from './Toe';\nimport React from 'react'\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    let startToe = []\n    for(let i=0;i<3*3;i++){\n      startToe.push(\n        {id: i, clicked: false, clickedBy: \"\"}\n      )\n    }\n    this.playerColors = [\n      this.generateRandomColor(),\n      this.generateRandomColor()\n    ]\n    this.state = {\n      toes: startToe,\n      players: [],\n      currentPlayer: null,\n      winner: null\n    }\n  }\n\n  handleClick = (id) => {\n    let newToes = this.state.toes\n    for(let el of newToes){\n      if(el.id == id){\n        el.clicked = true\n        el.clickedBy = this.state.currentPlayer\n      }\n    }\n    let playerIndex = this.state.players.indexOf(this.state.currentPlayer)\n    let newPlayerIndex = playerIndex>= this.state.players.length-1 ? 0 : playerIndex+1\n    this.setState({\n      toes:newToes,\n      currentPlayer: this.state.players[newPlayerIndex]\n    })\n    this.findWinner();\n  }\n\n  generateRandomColor = () => {\n    let pos = \"12334567890ABCDEF\"\n    let output = \"#\"\n    for(let i=0;i<6;i++){\n      let randomIndex = Math.floor(Math.random()*pos.length)\n      output += pos[randomIndex]\n    }\n    return output\n  }\n\n  setPlayers = () => {\n    let player1 = document.getElementById(\"player1input\").value\n    let player2 = document.getElementById(\"player2input\").value\n    let playersInput = [player1, player2]\n    this.setState({\n      players: playersInput,\n      currentPlayer: playersInput[Math.floor(Math.random()*playersInput.length)]\n    })\n  }\n\n  findWinner = ()=>{\n    /* Brettet\n    1, 2, 3\n    4, 5, 6\n    7, 8, 9\n\n    Sjekker om en person \"eier\" hele winnerpath for Ã¥ se om den personen vinner.\n    */\n    let winnerPaths = [\n      [1, 4, 7],\n      [2, 5, 8],\n      [3, 6, 9],\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n      [1, 5, 9],\n      [3, 5, 7]\n    ]\n    let toeNow = this.state.toes\n    for(let path of winnerPaths){\n      let person = toeNow[path[0]-1].clickedBy\n      if(person == \"\"){\n        continue\n      }\n      let pathOwned = true\n      for(let step of path){\n        if(toeNow[step-1].clickedBy != person){\n          pathOwned = false\n        }\n      }\n      if(pathOwned){\n        this.setState({\n          winner: person\n        })\n      }\n    }\n  }\n\n  render = () => {\n    if(this.state.winner){\n      return (\n        <div className=\"winnerScreen\">\n          <h1>{this.state.winner} vant!</h1>\n        </div>\n      )\n    }\n    if(this.state.players.length<2){\n      return (\n        <div className=\"App\">\n          <div className=\"textContainer\">\n            Spiller 1: <input type=\"text\" id=\"player1input\"></input>\n            <br></br>\n            Spiller 2: <input type=\"text\" id=\"player2input\"></input>\n            <br></br>\n            <button onClick={this.setPlayers}>Spill!</button>\n          </div>\n        </div>\n      )\n    }\n\n    let output = []\n    for(let i =0;i<this.state.toes.length;i++){\n      let el = this.state.toes[i]\n      output.push(<Toe clicked={el.clicked} clickHandler={()=>{this.handleClick(el.id)}} color={this.playerColors[this.state.players.indexOf(el.clickedBy)]}/>)\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"board\" style={{display: this.state.players.length>0 ? \"\" : \"none\"}}>\n          {output}\n        </div>\n        <br></br>\n        <div className=\"textContainer\">\n          <div>\n            <p>{this.state.currentPlayer} sin tur!</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n",["19","20"],"/Users/sanderulset/Documents/Github/tic-tac-toe/src/Toe.jsx",[],{"ruleId":"21","severity":1,"message":"22","line":29,"column":16,"nodeType":"23","messageId":"24","endLine":29,"endColumn":18},{"ruleId":"21","severity":1,"message":"22","line":84,"column":17,"nodeType":"23","messageId":"24","endLine":84,"endColumn":19},{"ruleId":"21","severity":1,"message":"25","line":89,"column":37,"nodeType":"23","messageId":"24","endLine":89,"endColumn":39},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-native-reassign",["30"],"no-negated-in-lhs",["31"],"no-global-assign","no-unsafe-negation"]